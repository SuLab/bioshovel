articles(
    id      text,
    content text
).

sentences(
    doc_id         text,
    sentence_index int,
    sentence_text  text,
    tokens         text[],
    lemmas         text[],
    pos_tags       text[],
    ner_tags       text[],
    doc_offsets    int[],
    dep_types      text[],
    dep_tokens     int[]
).

person_mention(
    mention_id     text,
    mention_text   text,
    doc_id         text,
    sentence_index int,
    begin_index    int,
    end_index      int
).

function map_person_mention over (
        doc_id         text,
        sentence_index int,
        tokens         text[],
        ner_tags       text[]
    ) returns rows like person_mention
    implementation "udf/map_person_mention.py" handles tsv lines.

person_mention += map_person_mention(
    doc_id, sentence_index, tokens, ner_tags
) :-
    sentences(doc_id, sentence_index, _, tokens, _, _, ner_tags, _, _, _).

// -----------------------------------------------------------------------------

chemical_mention(
    mention_id     text,
    mention_text   text,
    doc_id         text,
    sentence_index int,
    begin_index    int,
    end_index      int
).

function map_chemical_mention over (
        doc_id         text,
        sentence_index int,
        tokens         text[],
        ner_tags       text[]
    ) returns rows like chemical_mention
    implementation "udf/map_chemical_mention.py" handles tsv lines.

chemical_mention += map_chemical_mention(
    doc_id, sentence_index, tokens, ner_tags
) :-
    sentences(doc_id, sentence_index, _, tokens, _, _, ner_tags, _, _, _).

// -----------------------------------------------------------------------------

disease_mention(
    mention_id     text,
    mention_text   text,
    doc_id         text,
    sentence_index int,
    begin_index    int,
    end_index      int
).

function map_disease_mention over (
        doc_id         text,
        sentence_index int,
        tokens         text[],
        ner_tags       text[]
    ) returns rows like disease_mention
    implementation "udf/map_disease_mention.py" handles tsv lines.

disease_mention += map_disease_mention(
    doc_id, sentence_index, tokens, ner_tags
) :-
    sentences(doc_id, sentence_index, _, tokens, _, _, ner_tags, _, _, _).

// -----------------------------------------------------------------------------

gene_mention(
    mention_id     text,
    mention_text   text,
    doc_id         text,
    sentence_index int,
    begin_index    int,
    end_index      int
).

function map_gene_mention over (
        doc_id         text,
        sentence_index int,
        tokens         text[],
        ner_tags       text[]
    ) returns rows like gene_mention
    implementation "udf/map_gene_mention.py" handles tsv lines.

gene_mention += map_gene_mention(
    doc_id, sentence_index, tokens, ner_tags
) :-
    sentences(doc_id, sentence_index, _, tokens, _, _, ner_tags, _, _, _).

// -----------------------------------------------------------------------------

species_mention(
    mention_id     text,
    mention_text   text,
    doc_id         text,
    sentence_index int,
    begin_index    int,
    end_index      int
).

function map_species_mention over (
        doc_id         text,
        sentence_index int,
        tokens         text[],
        ner_tags       text[]
    ) returns rows like species_mention
    implementation "udf/map_species_mention.py" handles tsv lines.

species_mention += map_species_mention(
    doc_id, sentence_index, tokens, ner_tags
) :-
    sentences(doc_id, sentence_index, _, tokens, _, _, ner_tags, _, _, _).

// -----------------------------------------------------------------------------
// following example of spouse candidates, but excluding sentences that have
// 3 or more genes (example excluded sentences with 5 or more person mentions)

gene_gene_candidate(
    g1_id   text,
    g1_name text,
    g2_id   text,
    g2_name text
).

num_genes(doc_id, sentence_index, COUNT(p)) :-
    gene_mention(p, _, doc_id, sentence_index, _, _).

gene_gene_candidate(g1, g1_name, g2, g2_name) :-
    num_genes(same_doc, same_sentence, num_g),
    gene_mention(g1, g1_name, same_doc, same_sentence, g1_begin, _),
    gene_mention(g2, g2_name, same_doc, same_sentence, g2_begin, _),
    num_g < 3,
    g1_name != g2_name,
    g1_begin != g2_begin.

// -----------------------------------------------------------------------------
// feature extraction with ddlib in DDlog
// (following example of spouse example)

gene_gene_feature(
    g1_id   text,
    g2_id   text,
    feature text
).

function extract_gene_gene_features over (
        g1_id          text,
        g2_id          text,
        g1_begin_index int,
        g1_end_index   int,
        g2_begin_index int,
        g2_end_index   int,
        doc_id         text,
        sent_index     int,
        tokens         text[],
        lemmas         text[],
        pos_tags       text[],
        ner_tags       text[],
        dep_types      text[],
        dep_tokens     int[]
    ) returns rows like gene_gene_feature
    implementation "udf/extract_gene_gene_features.py" handles tsv lines.

gene_gene_feature += extract_gene_gene_features(
    g1_id, g2_id, g1_begin_index, g1_end_index, g2_begin_index, g2_end_index,
    doc_id, sent_index, tokens, lemmas, pos_tags, ner_tags, dep_types, dep_tokens
) :-
    gene_mention(g1_id, _, doc_id, sent_index, g1_begin_index, g1_end_index),
    gene_mention(g2_id, _, doc_id, sent_index, g2_begin_index, g2_end_index),
    sentences(doc_id, sent_index, _, tokens, lemmas, pos_tags, ner_tags, _, dep_types, dep_tokens).