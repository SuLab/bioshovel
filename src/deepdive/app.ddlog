articles(
    doc_id              text,
    content             text,
    article_archive     text,
    article_filepath    text,
    corenlp_filepath    text,
    pubtator_filepath   text
).

sentences(
    doc_id         text,
    sentence_index int,
    sentence_text  text,
    tokens         text[],
    lemmas         text[],
    pos_tags       text[],
    ner_tags       text[],
    doc_offsets    int[],
    dep_types      text[],
    dep_tokens     int[]
).

biothing_token(
    type                text,
    token_id            int,
    sentence_index      int,
    doc_id              text,
    mesh_id             text,
    token_start_char    int,
    token_end_char      int,
    pubtator_start_char int,
    pubtator_end_char   int 
).

corenlp_token(
    type                text,
    sentence_index      int,
    doc_id              text,
    token_text          text,
    token_start_char    int
).

corenlp_token(unnest(ner_tags), sentence_index, doc_id, unnest(token_text), unnest(doc_offsets)) :-
    sentences(doc_id, sentence_index, _, token_text, _, _, ner_tags, doc_offsets, _, _).

mention(
    mention_id           text,
    mention_type         text,
    mention_text         text,
    doc_id               text,
    sentence_index       int,
    token_start_index    int,
    token_end_index      int,
    mesh_id              text
).

// this is only taking tokens and identifying them as mentions, NOT combining spans
// (TO DO)
//
// Also, this only takes biothing_tokens for now. (may expand to other NER types in the future...)
//
mention(doc_id || "_" || sentence_index || "_" || token_id || "_" || token_id,
        type,
        token_text,
        doc_id,
        sentence_index,
        token_id,
        token_id,
        mesh_id
        ) :-
    biothing_token(type, token_id, sentence_index, doc_id, mesh_id, token_start_char, token_end_char, _, _),
    corenlp_token(_, sentence_index, doc_id, token_text, corenlp_start_char),
    token_start_char = corenlp_start_char.

// mention table -- possible replacement (work in progress)
// (problem: start token and end token have the same value)
//mention(doc_id || "_" || sentence_index || "_" || token_id || "_" || token_id,
//        type,
//        ARRAY_AGG(token_text),
//        doc_id,
//        sentence_index,
//        MIN(token_id),
//        MAX(token_id),
//        mesh_id
//        ) :-
//    biothing_token(type, token_id, sentence_index, doc_id, mesh_id, token_start_char, token_end_char, _, _),
//    corenlp_token(_, sentence_index, doc_id, token_text, corenlp_start_char),
//    token_start_char < 1+corenlp_start_char, corenlp_start_char < token_end_char
//    .

//ip-172-30-0-127 deepdive> deepdive query 'spans(
//        type,
//        ARRAY_AGG(token_text),
//        doc_id,
//        sentence_index,
//        MIN(token_id),
//        MAX(token_id),
//        mesh_id
//        ) :-
//    biothing_token(type, token_id, sentence_index, doc_id, mesh_id, token_start_char, token_end_char, _, _),
//    corenlp_token(_, sentence_index, doc_id, token_text, corenlp_start_char),
//    token_start_char < 1+corenlp_start_char, corenlp_start_char < token_end_char
//    .
//    
//        ?- spans(type, text, doc, sent, start, end, mesh), start < end.
//    '

// create pairs of chemical-disease mentions
chemical_disease_candidate(
    chem_id         text,
    chem_name       text,
    chem_mesh_id    text,
    disease_id      text,
    disease_name    text,
    disease_mesh_id text,
    relation        text
).

chemical_disease_candidate(chem_mention_id,
                           chem_name,
                           chem_mesh_id,
                           disease_mention_id,
                           disease_name,
                           disease_mesh_id,
                           "CID") :-
    mention(chem_mention_id, mention_type_chem, chem_name, doc_id, sentence_index, _, _, chem_mesh_id),
    mention(disease_mention_id, mention_type_disease, disease_name, doc_id, sentence_index, _, _, disease_mesh_id),
    mention_type_chem = "CHEMICAL",
    mention_type_disease = "DISEASE".

chemical_disease_feature(
    chemical_id     text,
    disease_id  text,
    feature     text
).

function extract_chemical_disease_features over (
        chemical_id             text,
        disease_id              text,
        chemical_begin_index    int,
        chemical_end_index      int,
        disease_begin_index     int,
        disease_end_index       int,
        doc_id                  text,
        sent_index              int,
        tokens                  text[],
        lemmas                  text[],
        pos_tags                text[],
        ner_tags                text[],
        my_ner_tags             text[],
        my_ner_tags_token_ids   int[],
        dep_types               text[],
        dep_tokens              int[]
    ) returns rows like chemical_disease_feature
    implementation "udf/extract_chemical_disease_features.py" handles tsv lines.

// temporary aggregation table (view) used for chemical_disease_feature
biothing_token_agg(doc_id, sentence_index, ARRAY_AGG(type), ARRAY_AGG(token_id)) :-
  biothing_token(type, token_id, sentence_index, doc_id, mesh_id, token_start_char, token_end_char, pubtator_start_char, pubtator_end_char).

chemical_disease_feature += extract_chemical_disease_features(
    chemical_id, disease_id, chemical_begin_index, chemical_end_index,
    disease_begin_index, disease_end_index, doc_id, sentence_index, tokens,
    lemmas, pos_tags, corenlp_ner_tags, my_ner_tags, my_ner_tags_token_ids,
    dep_types, dep_tokens) :-
    mention(chemical_id,
            chem_mention_type,
            _,
            doc_id,
            sentence_index,
            chemical_begin_index,
            chemical_end_index,
            mesh_id),
    mention(disease_id,
            disease_mention_type,
            _,
            doc_id,
            sentence_index,
            disease_begin_index,
            disease_end_index,
            dmesh_id),
    chem_mention_type = "CHEMICAL",
    disease_mention_type = "DISEASE",
    biothing_token_agg(doc_id, sentence_index, my_ner_tags, my_ner_tags_token_ids),
    sentences(doc_id, sentence_index, _, tokens, lemmas, pos_tags, corenlp_ner_tags, _, dep_types, dep_tokens).

// chemical-disease ground truth data table (chemical-induce-disease, CID)
chemical_disease_gt(
    mesh_id_chemical    text,
    mesh_id_disease     text,
    relation            text
).